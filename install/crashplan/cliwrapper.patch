12,13d11
< import com.backup42.common.perm.C42PermissionPro.CPD;
< import com.backup42.common.perm.C42PermissionPro.CPS;
47d44
< import com.code42.backup.C42PermissionBackup.Backup;
51d47
< import com.code42.event.Listener;
60a57
> import com.code42.messaging.MessageReceiverProxy;
73a71
> import com.code42.swt.view.AppWindowEvent;
95,96d92
< import org.eclipse.swt.widgets.Display;
< import org.eclipse.swt.widgets.Shell;
98,102c94,95
< public class CPDesktop
<   extends Publisher
<   implements SplashWindow.Event.Listener, MainWindow.Event.Listener, IModelObserver
< {
<   private static final Logger log = LoggerFactory.getLogger(CPDesktop.class);
---
> public class CliWrapper {
>   private static final com.code42.logging.Logger log = LoggerFactory.getLogger(CliWrapper.class.getName());
104d96
<   private static Display display;
106d97
<   private final Listener listener = new Listener(this);
109c100
<   private final AppModel appModel;
---
>   private AppModel appModel;
180c171
<       AppTimer.begin(CPDesktop.class.getSimpleName());
---
>       AppTimer.begin(CliWrapper.class.getSimpleName());
184c175
<       CPDesktop startupController = new CPDesktop(args);
---
>       CliWrapper startupController = new CliWrapper(args);
189c180
<       String msg = "Failed to launch " + CPDesktop.class.getSimpleName() + "; " + e;
---
>       String msg = "Failed to launch " + CliWrapper.class.getSimpleName() + "; " + e;
192a184,192
> 
>     Thread.sleep(1000);
>     System.out.println("\n\n");
>     for(String arg : args){
>         Services.getInstance().sendCommand(arg, new MessageReceiverProxy(CliWrapper.class));
>     }
>     System.out.println("\n\n");
>     Thread.sleep(1000);
>     Runtime.getRuntime().halt(0);
197,199c197
<     log.info("Bring main window forward.", new Object[0]);
<     Display disp = MainWindow.getInstance().getShell().getDisplay();
<     ActionManager.run(disp, new ShowMainWindow());
---
>     System.out.println("Bring main window forward.");
202c200
<   public CPDesktop(String[] args)
---
>   public CliWrapper(String[] args)
217a216,217
>     appModel = new AppModel(commandLineArguments);
> 
224d223
<     Display.setAppName(appName);
226,227d224
<     appModel = new AppModel(commandLineArguments);
<     appModel.getConfigModel().addObserver(this);
245a243,244
>     appModel = new AppModel(commandLineArguments);
> 
276,279d274
<     display = Display.getDefault();
<     
<     CPFont.loadFonts(display, appModel.getDesktopProperties());
<     
308c303
<     OrgType orgType = orgType.get();
---
>     OrgType orgType = OrgType.CONSUMER;
310c305
<     Path skinCustomPath = appDataPath.resolve(CPService.Custom.DST_SKIN_CUSTOM_DIR);
---
>     Path skinCustomPath = appDataPath.resolve(Custom.DST_SKIN_CUSTOM_DIR);
403c398
<       CarbonLib.FSCatalogInfo info = fm.getCatalogInfo(testFile);
---
>       FSCatalogInfo info = fm.getCatalogInfo(testFile);
415,424d409
<     try
<     {
<       splashWindow = new SplashWindow(display);
<       splashWindow.addListeners(new IListener[] { listener });
<       splashWindow.open();
<     }
<     catch (Throwable e)
<     {
<       log.warn("Unable to show splash. " + e.getMessage(), new Object[] { e });
<     }
430,433d414
<     services.addListener(listener, ConnectedEvent.class);
<     services.addListener(listener, ConnectFailedEvent.class);
<     services.addListener(listener, StatusResponseMessage.class);
<     
436c417
<     PermissionUtils.init(new Class[] { C42PermissionBackup.Backup.class, C42PermissionBase.Admin.class, C42PermissionBase.None.class, C42PermissionPro.CPD.class, C42PermissionPro.CPS.class });
---
>     PermissionUtils.init(new Class[] {});
447c428
<           CPDesktop.log.debug("ShutdownHook...calling cleanup", new Object[0]);
---
>           CliWrapper.log.debug("ShutdownHook...calling cleanup", new Object[0]);
449c430
<           CPDesktop.log.info("EXITING... Normally", new Object[0]);
---
>           CliWrapper.log.info("EXITING... Normally", new Object[0]);
452c433
<           CPDesktop.log.debug("ShutdownHook...sleeping 3 seconds", new Object[0]);
---
>           CliWrapper.log.debug("ShutdownHook...sleeping 3 seconds", new Object[0]);
454c435
<           synchronized (CPDesktop.MAIN_MONITOR)
---
>           synchronized (CliWrapper.MAIN_MONITOR)
456,457c437,438
<             CPDesktop.log.debug("ShutdownHook...notify main of shutdown.", new Object[0]);
<             CPDesktop.MAIN_MONITOR.notifyAll();
---
>             CliWrapper.log.debug("ShutdownHook...notify main of shutdown.", new Object[0]);
>             CliWrapper.MAIN_MONITOR.notifyAll();
461c442
<         CPDesktop.log.debug("ShutdownHook...calling halt.", new Object[0]);
---
>         CliWrapper.log.debug("ShutdownHook...calling halt.", new Object[0]);
467,487d447
<     try
<     {
<       while (!display.isDisposed()) {
<         try
<         {
<           if (!display.readAndDispatch()) {
<             display.sleep();
<           }
<         }
<         catch (Throwable e)
<         {
<           log.warn(e.toString(), new Object[] { e });
<           display.sleep();
<         }
<       }
<     }
<     finally
<     {
<       SWTExec.shutdown();
<       System.exit(0);
<     }
498c458
<           CPDesktop.log.info("Restarting service...", new Object[0]);
---
>           CliWrapper.log.info("Restarting service...", new Object[0]);
507c467
<         CPDesktop.log.info("Connecting to service at " + new Location(host, port), new Object[0]);
---
>         CliWrapper.log.info("Connecting to service at " + new Location(host, port), new Object[0]);
515c475
<               CPDesktop.log.info("    FAILED on attempt #" + (i - 1) + ", retrying in " + delay + "ms", new Object[0]);
---
>               CliWrapper.log.info("    FAILED on attempt #" + (i - 1) + ", retrying in " + delay + "ms", new Object[0]);
526c486
<               CPDesktop.log.warn("Unable to establish connection.", new Object[] { e });
---
>               CliWrapper.log.warn("Unable to establish connection.", new Object[] { e });
531c491
<               CPDesktop.log.info("    SUCCESS on attempt #" + i, new Object[0]);
---
>               CliWrapper.log.info("    SUCCESS on attempt #" + i, new Object[0]);
536c496
<               CPDesktop.log.warn("    FAILED on attempt #" + i + ", aborting because something is seriously wrong.", new Object[0]);
---
>               CliWrapper.log.warn("    FAILED on attempt #" + i + ", aborting because something is seriously wrong.", new Object[0]);
540c500
<               CPDesktop.log.info("    FAILED on attempt #" + i + ", done", new Object[0]);
---
>               CliWrapper.log.info("    FAILED on attempt #" + i + ", done", new Object[0]);
558c518
<           CPDesktop.log.error("Interrupted while waiting to connect!", new Object[0]);
---
>           CliWrapper.log.error("Interrupted while waiting to connect!", new Object[0]);
587c547
<     String localeConfig = (String)getConfigserviceUI.locale.getValue();
---
>     String localeConfig = (String)appModel.getConfigModel().getConfig().serviceUI.locale.getValue();
603c563
<       Locale locale = CPText.localeToUse(locale, machineDefaultLocale);
---
>       locale = CPText.localeToUse(locale, machineDefaultLocale);
671,681d630
<     display.asyncExec(new Runnable()
<     {
<       public void run()
<       {
<         CPDesktop self = CPDesktop.this;
<         MainWindow mainWindow = new MainWindow(CPDesktop.display, appModel, services);
<         mainWindow.addListener(listener, new Class[] { MainWindow.Event.AppCloseEvent.class, MainWindow.Event.AppShowEvent.class, AppWindowEvent.WindowReadyEvent.class });
<         
<         new MainWindowController(mainWindow, appModel, services);
<       }
<     });
726,733d674
<     CPFont.loadFonts(Display.getDefault(), new Properties());
<   }
<   
<   public static void close()
<   {
<     if (!display.isDisposed()) {
<       display.close();
<     }
741c682
<  */
\ No newline at end of file
---
>  */
