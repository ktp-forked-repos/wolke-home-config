#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

my $DEFAULT_WIDTH = 150;
my $DEFAULT_HEIGHT = 150;
my $DEFAULT_TIMEOUT_MILLIS = 1500;

my $usage = "Usage:
  $0 -h | --help
    show this message

  $0 [OPTS] IMG [IMG IMG ...]
    briefly show <IMG> files, all on screen at once, using feh
      -resize images, preserving aspect ratio, to fit within <WIDTH>x<HEIGHT>
        (WIDTH=${DEFAULT_WIDTH} and HEIGHT=$DEFAULT_HEIGHT by default)
      -position images in a grid, starting at the bottom right corner of the screen,
        moving to the left, and then up a row when no more images can fit to the left
      -show images for <TIMEOUT_MILLIS>ms
        (TIMEOUT_MILLIS=${DEFAULT_TIMEOUT_MILLIS}s by default)

  OPTS
    --size=WIDTHxHEIGHT              (default is ${DEFAULT_WIDTH}x${DEFAULT_HEIGHT}
      resize images, preserving aspect ratio, to fit within <WIDTH>x<HEIGHT>
    --timeout-millis=TIMEOUT_MILLIS  (default is ${DEFAULT_TIMEOUT_MILLIS}
      resize images to at most WIDTHxHEIGHT, preserving aspect ratio
";

sub main(@){
  my $width = $DEFAULT_WIDTH;
  my $height = $DEFAULT_HEIGHT;
  my $timeoutMillis = $DEFAULT_TIMEOUT_MILLIS;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^-h|--help$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^--size=(\d+)x(\d+)$/){
      ($width, $height) = ($1, $2);
    }elsif($arg =~ /^--timeout-millis=(\d+)$/){
      $timeoutMillis = $1;
    }else{
      die $usage;
    }
  }

  die $usage if @_ == 0;

  my $screenWidth = `res -w`;
  my $screenHeight = `res -h`;
  if($screenWidth !~ /^\d+$/ or $screenHeight !~ /^\d+$/){
    die "error getting screen WxH from `res`\n";
  }
  my $xOffset = $screenWidth;
  my $yOffset = $screenHeight - $height;
  my @pids;
  for my $img(@_){
    $xOffset -= $width;
    if($xOffset < 0){
      $xOffset = $screenWidth - $width;
      $yOffset -= $height;
    }
    if($yOffset < 0){
      print STDERR "WARNING: out of room!\n";
      last;
    }
    my $pid = fork;
    if($pid == 0){
      exec "/usr/bin/feh", "-Z", "-g", "${width}x${height}+${xOffset}+${yOffset}", $img;
    }
    push @pids, $pid;
  }

  sleep $timeoutMillis/1000.0;

  for my $pid(@pids){
    print "killing pid $pid\n";
    system "kill", "-9", $pid;
    waitpid $pid, 0;
  }

  system "stty", "sane";
}

&main(@ARGV);
