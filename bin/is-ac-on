#!/usr/bin/perl
use strict;
use warnings;
use AI::FANN qw(:all);
use Time::HiRes qw(time);

my $LCD_REGION = "100x70+150+0";

my $SCALE = {
  GR => {low=>10,    high=>30},
  KU => {low=>4,     high=>15},
  SD => {low=>6000,  high=>10000},
  MV => {low=>50000, high=>65000},
};
my $NEURAL_NET_TRAINING_DIR_NO = "$ENV{HOME}/.cache/is-ac-on/no";
my $NEURAL_NET_TRAINING_DIR_YES = "$ENV{HOME}/.cache/is-ac-on/yes";
my $NEURAL_NET_CACHE = "$ENV{HOME}/.cache/is-ac-on/neuralnet.ann";

sub createNeuralNet();
sub loadNeuralNetTrainingData();
sub analyzeImage($);
sub getScaledValue($$);
sub getGreenDiff($);
sub identifyImage($@);
sub run(@);

my $usage = "Usage:
  $0 [OPTS] [IMAGE_FILE_NAME]
    print 'yes' or 'no' if neural net accepts sbcam (or IMAGE_FILE_NAME)
    -if IMAGE_FILE_NAME is not given,
      run `sbcam` and use the image produced
    -pass the image to `identify` and read the following properties:
       KU = %[kurtosis]
       SD = %[standard-deviation]
       MV = %[max]
    -calculate the green-ness of the LCD region:
       -crop the area to $LCD_REGION using `convert`
       -scale the image to a single pixel using `convert`
       -read color 0-255 as \"<RED>r,<GREEN>g,<BLUE>b\" from `convert`
       -use the green channel minus the average of the red and blue channels
       GR = <GREEN> - ((<RED> + <BLUE)/2)
    -scale the values between 0 and 1 as follows
       SCALED_GR: [low=$$SCALE{GR}{low}, high=$$SCALE{GR}{high}]
       SCALED_KU: [low=$$SCALE{KU}{low}, high=$$SCALE{KU}{high}]
       SCALED_SD: [low=$$SCALE{SD}{low}, high=$$SCALE{SD}{high}]
       SCALED_MV: [low=$$SCALE{MV}{low}, high=$$SCALE{MV}{high}]
       <scaled_value> = (<value> - <low>) / (<high> - <low>)
       (values below low are negative, above high are greater than 1)
    -if $NEURAL_NET_CACHE exists:
      load the neural net using AI::FANN
    -if $NEURAL_NET_CACHE does not exist:
      -train a neural net using FANN on the images located at:
        \"no\"  => $NEURAL_NET_TRAINING_DIR_NO
        \"yes\" => $NEURAL_NET_TRAINING_DIR_YES
      -calculate the scaled values above and use as the input neurons
      -use 1 as the output neuron for 'on' and -1 for 'off'
      -save it to $NEURAL_NET_CACHE
    -pass the scaled values as the input nodes to the neural network
    -if the output neuron is non-negative, print 'yes'
    -if the output neuron is negative, print 'no'

  $0 --test
    test the neural net using the training data
    -for each image in $NEURAL_NET_TRAINING_DIR_NO
      -if image would print \"yes\":
        print \"FAIL[expected no]: <IMG>\"
    -for each image in $NEURAL_NET_TRAINING_DIR_YES
      -if image would print \"no\":
        print \"FAIL[expected yes]: <IMG>\"

  $0 -t|--train [no|yes]
    add an image to the training data
    -take a picture with sbcam and stick it in:
      \"no\"  => $NEURAL_NET_TRAINING_DIR_NO
      \"yes\" => $NEURAL_NET_TRAINING_DIR_YES
    -remove cached neural net at $NEURAL_NET_CACHE

   OPTS
     -v | --verbose
       print the output of sbcam, the image file name,
         and the relevant properties of the image
";

my $NOW_MILLIS = int(time*1000);

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(--test)$/){
    testNeuralNet();
    exit;
  }elsif(@_ == 2 and $_[0] =~ /^(-t|--train)$/ and $_[1] =~ /^(no|yes)$/){
    my $isAcOn = $_[1] eq "yes" ? 1 : 0;
    my $dir;
    if($isAcOn){
      $dir = $NEURAL_NET_TRAINING_DIR_YES;
    }else{
      $dir = $NEURAL_NET_TRAINING_DIR_NO;
    }
    my $trainFile = "$dir/sbcam_$NOW_MILLIS.jpg";
    run "sbcam $trainFile";
    run "rm", "-f", $NEURAL_NET_CACHE;
    exit;
  }

  my $verbose = shift if @_ > 0 and $_[0] =~ /^(-v|--verbose)$/;
  my $srcFile;
  if(@_ > 0 and -f $_[0]){
    $srcFile = shift;
  }
  die $usage if @_ > 0;

  if(not defined $srcFile){
    $srcFile = "/tmp/is-ac-on_sbcam_$NOW_MILLIS.jpg";
    if($verbose){
      system "sbcam $srcFile";
    }else{
      system "sbcam $srcFile >/dev/null 2>/dev/null";
    }
  }

  if(not -f $srcFile){
    die "ERROR: file \"$srcFile\" not found\n";
  }

  my $input = analyzeImage $srcFile;
  if($verbose){
    printf "FILE=%s\n", $srcFile;
    printf "SCALED_GR=%9.2f {%5d - %5d}\n",
      $$input[0], $$SCALE{GR}{low}, $$SCALE{GR}{high};
    printf "SCALED_KU=%9.2f {%5d - %5d}\n",
      $$input[1], $$SCALE{KU}{low}, $$SCALE{KU}{high};
    printf "SCALED_SD=%9.2f {%5d - %5d}\n",
      $$input[2], $$SCALE{SD}{low}, $$SCALE{SD}{high};
    printf "SCALED_MV=%9.2f {%5d - %5d}\n",
      $$input[3], $$SCALE{MV}{low}, $$SCALE{MV}{high};
  }

  my $ann = createNeuralNet();

  my $output = $ann->run($input);
  if($verbose){
    printf "output=$$output[0]\n";
  }
  if($$output[0] < 0){
    print "no\n";
  }else{
    print "yes\n";
  }
}

sub createNeuralNet(){
  if(not -f $NEURAL_NET_CACHE){
    my $ann = AI::FANN->new_standard(4, 3, 1);

    $ann->hidden_activation_function(FANN_SIGMOID_SYMMETRIC);
    $ann->output_activation_function(FANN_SIGMOID_SYMMETRIC);

    my $data = loadNeuralNetTrainingData();

    my $trainData = AI::FANN::TrainData->new(@$data);
    $trainData->shuffle();

    $ann->train_on_data($trainData, 500000, 1000, 0.001);

    $ann->save($NEURAL_NET_CACHE);
  }
  return AI::FANN->new_from_file($NEURAL_NET_CACHE);
}

sub loadNeuralNetTrainingData(){
  my $data = [];
  for my $img(glob "$NEURAL_NET_TRAINING_DIR_NO/*"){
    my $input = analyzeImage $img;
    my $output = [-1];
    push @$data, $input;
    push @$data, $output;
  }
  for my $img(glob "$NEURAL_NET_TRAINING_DIR_YES/*"){
    my $input = analyzeImage $img;
    my $output = [1];
    push @$data, $input;
    push @$data, $output;
  }
  return $data;
}

sub testNeuralNet(){
  my $ann = createNeuralNet();

  my @noImages = glob "$NEURAL_NET_TRAINING_DIR_NO/*";
  print "testing " . @noImages . " no-images\n";
  for my $img(@noImages){
    my $input = analyzeImage $img;
    my $output = $ann->run($input);

    if($$output[0] >= 0){
      print "FAIL[expected no]: $img\n";
    }
  }

  my @yesImages = glob "$NEURAL_NET_TRAINING_DIR_YES/*";
  print "testing " . @yesImages . " yes-images\n";
  for my $img(@yesImages){
    my $input = analyzeImage $img;
    my $output = $ann->run($input);

    if($$output[0] < 0){
      print "FAIL[expected yes]: $img\n";
    }
  }
}

sub analyzeImage($){
  my ($srcFile) = @_;
  my $lcdFile = "/tmp/is-ac-on_crop_$NOW_MILLIS.jpg";
  system "convert", $srcFile, "-crop", $LCD_REGION, $lcdFile;

  my $info = identifyImage $srcFile, qw(kurtosis standard-deviation max);
  my $KU = $$info{"kurtosis"};
  my $SD = $$info{"standard-deviation"};
  my $MV = $$info{"max"};

  my $GR = getGreenDiff $lcdFile;

  my $SGR = getScaledValue $GR, $$SCALE{GR};
  my $SKU = getScaledValue $KU, $$SCALE{KU};
  my $SSD = getScaledValue $SD, $$SCALE{SD};
  my $SMV = getScaledValue $MV, $$SCALE{MV};

  return [$SGR, $SKU, $SSD, $SMV];
}

sub getScaledValue($$){
  my ($val, $valScale) = @_;
  my $low = $$valScale{low};
  my $high = $$valScale{high};

  return ($val-$low) / ($high - $low);
}

sub getGreenDiff($){
  my ($image) = @_;
  my @avgColorCmd = (
    "convert", $image,
    "-resize", "1x1!",
    "-format", ""
               . "%[fx:int(255*r+0.5)]r,"
               . "%[fx:int(255*g+0.5)]g,"
               . "%[fx:int(255*b+0.5)]b",
    "info:-",
  );
  open FH, "-|", @avgColorCmd;
  my $colors = <FH>;
  close FH;

  if($colors !~ /^(\d+)r,(\d+)g,(\d+)b$/){
    die "could not parse avg color information\n";
  }
  my ($r, $g, $b) = ($1, $2, $3);

  my $rb = ($r + $b) / 2;
  $rb = 0.0001 if $rb == 0;
  my $greenness = $g - $rb;
  return $greenness;
}

sub identifyImage($@){
  my ($image, @props) = @_;

  my $format = join("@", map {"%[$_]"} @props) . "\\n";
  my @cmd = ("identify", "-format", $format, $image);

  open FH, "-|", @cmd;
  my $val = join '', <FH>;
  close FH;
  $val =~ s/\n//g;

  my @vals = split /@/, $val;
  if(@vals != @props){
    die "Error reading `@cmd` output: $val\n";
  }

  my $valsByProp = {};
  for(my $i=0; $i<@vals; $i++){
    my $prop = $props[$i];
    my $propVal = $vals[$i];
    if($propVal !~ /^-?\d+(?:\.\d+)?$/){
      die "non-numeric value returned by `@cmd`: $propVal\n";
    }
    $$valsByProp{$prop} = $propVal;
  }
  return $valsByProp;
}

sub run(@){
  print "@_\n";
  system @_;
  if($? != 0){
    die "error running \"@_\"\n";
  }
}

&main(@ARGV);
