#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $LCD_REGION = "100x70+140+0";

my $THRESHOLD = 0.5;
my $CONFIG = {
  GR => {low=>10,    high=>30,    weight=>0.4},
  KU => {low=>4,     high=>15,    weight=>0.2},
  SD => {low=>6000,  high=>10000, weight=>0.2},
  MV => {low=>50000, high=>65000, weight=>0.2},
};

sub getWeightedValue($$);
sub getGreenDiff($);
sub identifyImage($@);

my $usage = "Usage:
  $0 [OPTS] [IMAGE_FILE_NAME]
    -if IMAGE_FILE_NAME is not given,
      run `sbcam` and use the image produced
    -pass the image to `identify` and read the following properties:
       KU = %[kurtosis]
       SD = %[standard-deviation]
       MV = %[max]
    -calculate the green-ness of the LCD region:
       -crop the area to $LCD_REGION using `convert`
       -scale the image to a single pixel using `convert`
       -read color 0-255 as \"<RED>r,<GREEN>g,<BLUE>b\" from `convert`
       -use the green channel minus the average of the red and blue channels
       GR = <GREEN> - ((<RED> + <BLUE)/2)
    -based on the following calculation, print either 'yes' or 'no'
       -scale the values between 0 and 1 as follows
          SCALED_GR: [low=$$CONFIG{GR}{low}, high=$$CONFIG{GR}{high}]
          SCALED_KU: [low=$$CONFIG{KU}{low}, high=$$CONFIG{KU}{high}]
          SCALED_SD: [low=$$CONFIG{SD}{low}, high=$$CONFIG{SD}{high}]
          SCALED_MV: [low=$$CONFIG{MV}{low}, high=$$CONFIG{MV}{high}]
          <scaled_value> = (<value> - <low>) / (<high> - <low>)
          (values below low are negative, above high are greater than 1)
       -weight the scaled values as follow:
          WEIGHTED_GR = SCALED_GR * $$CONFIG{GR}{weight}
          WEIGHTED_KU = SCALED_KU * $$CONFIG{KU}{weight}
          WEIGHTED_SD = SCALED_SD * $$CONFIG{SD}{weight}
          WEIGHTED_MV = SCALED_MV * $$CONFIG{MV}{weight}
       -sum the weighted values
          if above $THRESHOLD, print 'yes', otherwise print 'no'

   OPTS
     -v | --verbose
       print the output of sbcam, the image file name,
         and the relevant properties of the image
";

sub main(@){
  my $verbose = shift if @_ > 0 and $_[0] =~ /^(-v|--verbose)$/;
  my $srcFile;
  if(@_ > 0 and -f $_[0]){
    $srcFile = shift;
  }
  die $usage if @_ > 0;

  my $nowMillis = int(time*1000);

  if(not defined $srcFile){
    $srcFile = "/tmp/is-ac-on_sbcam_$nowMillis.jpg";
    if($verbose){
      system "sbcam $srcFile";
    }else{
      system "sbcam $srcFile >/dev/null 2>/dev/null";
    }
  }

  if(not -f $srcFile){
    die "ERROR: file \"$srcFile\" not found\n";
  }

  my $lcdFile = "/tmp/is-ac-on_crop_$nowMillis.jpg";
  system "convert", $srcFile, "-crop", $LCD_REGION, $lcdFile;

  my $info = identifyImage $srcFile, qw(kurtosis standard-deviation max);
  my $KU = $$info{"kurtosis"};
  my $SD = $$info{"standard-deviation"};
  my $MV = $$info{"max"};

  my $GR = getGreenDiff $lcdFile;

  my $WGR = getWeightedValue $GR, $$CONFIG{GR};
  my $WKU = getWeightedValue $KU, $$CONFIG{KU};
  my $WSD = getWeightedValue $SD, $$CONFIG{SD};
  my $WMV = getWeightedValue $MV, $$CONFIG{MV};

  my $weightedTotal = $WGR + $WKU + $WSD + $WMV;

  if($verbose){
    print "FILE=$srcFile\n";
    print "GR=$GR {$WGR}\n";
    print "KU=$KU {$WKU}\n";
    print "SD=$SD {$WSD}\n";
    print "MV=$MV {$WMV}\n";
    print "TOTAL=$weightedTotal\n";
  }

  if($weightedTotal > $THRESHOLD){
    print "yes\n";
  }else{
    print "no\n";
  }
}

sub getWeightedValue($$){
  my ($val, $valConfig) = @_;
  my $low = $$valConfig{low};
  my $high = $$valConfig{high};
  my $weight = $$valConfig{weight};

  my $scaledVal = ($val-$low) / ($high - $low);

  return $scaledVal * $weight;
}

sub getGreenDiff($){
  my ($image) = @_;
  my @avgColorCmd = (
    "convert", $image,
    "-resize", "1x1!",
    "-format", ""
               . "%[fx:int(255*r+0.5)]r,"
               . "%[fx:int(255*g+0.5)]g,"
               . "%[fx:int(255*b+0.5)]b",
    "info:-",
  );
  open FH, "-|", @avgColorCmd;
  my $colors = <FH>;
  close FH;

  if($colors !~ /^(\d+)r,(\d+)g,(\d+)b$/){
    die "could not parse avg color information\n";
  }
  my ($r, $g, $b) = ($1, $2, $3);

  my $rb = ($r + $b) / 2;
  $rb = 0.0001 if $rb == 0;
  my $greenness = $g - $rb;
  return $greenness;
}

sub identifyImage($@){
  my ($image, @props) = @_;

  my $format = join("@", map {"%[$_]"} @props) . "\\n";
  my @cmd = ("identify", "-format", $format, $image);

  open FH, "-|", @cmd;
  my $val = join '', <FH>;
  close FH;
  $val =~ s/\n//g;

  my @vals = split /@/, $val;
  if(@vals != @props){
    die "Error reading `@cmd` output: $val\n";
  }

  my $valsByProp = {};
  for(my $i=0; $i<@vals; $i++){
    my $prop = $props[$i];
    my $propVal = $vals[$i];
    if($propVal !~ /^-?\d+(?:\.\d+)?$/){
      die "non-numeric value returned by `@cmd`: $propVal\n";
    }
    $$valsByProp{$prop} = $propVal;
  }
  return $valsByProp;
}

&main(@ARGV);
