#!/usr/bin/perl
use strict;
use warnings;

my $DEFAULT_WIDTH_PERCENT=43.0;
my $DEFAULT_OFFSET_PERCENT=3.54;

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTS] [FEH_ARG FEH_ARG ...]
    build a geometry argument to feh and run:
      feh --geometry=<GEOMETRY> FEH_ARG FEH_ARG ...

  OPTS
    --double
      double the width calculated by --page-width-pct
    --rotate
      swap <RES_X> and <RES_Y>
    --width-percent=WIDTH_PERCENT  {default is ${DEFAULT_WIDTH_PERCENT}%}
      set width to <WIDTH_PERCENT>% of <RES_X>
      (must be non-negative rational number)
    --offset-percent=OFFSET_PERCENT
      set vertical offset to <OFFSET_PERCENT>% of <RES_Y>
        and set height to <RES_Y> minus the vertical offset
      (must be non-negative rational number)
    --res-x=RES_X
      use RES_X instead of calculating with `res`
      (must be positive integer)
    --res-y=RES_Y
      use RES_Y instead of calculating with `res`
      (must be positive integer)
";

my $okNoParamArgs = join "|", qw(double rotate);
my $okParamArgs = join "|", qw(width-percent offset-percent res-x res-y);

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^-h|--help/;

  my $widthPercent = $DEFAULT_WIDTH_PERCENT;
  my $offsetPercent = $DEFAULT_OFFSET_PERCENT;
  my $isDouble = 0;
  my $isRotate = 0;
  my ($resX, $resY);
  while(@_ > 0){
    my ($arg, $val);
    if($_[0] =~ /^--($okNoParamArgs)$/){
      ($arg, $val) = ($1, undef);
      shift;
    }elsif($_[0] =~ /^--($okParamArgs)=(.+)$/){
      ($arg, $val) = ($1, $2);
      shift;
    }else{
      last;
    }

    $isDouble = 1 if $arg =~ /^(double)$/;
    $isRotate = 1 if $arg =~ /^(rotate)$/;
    $widthPercent = $val if $arg =~ /^(width-percent)$/;
    $offsetPercent = $val if $arg =~ /^(offset-percent)$/;
    $resX = $val if $arg =~ /^(res-x)$/;
    $resY = $val if $arg =~ /^(res-y)$/;
  }
  my @FEH_ARGS = @_;

  if(not defined $resX or not defined $resY){
    my $res = `res`;
    if($res =~ /^(\d+)x(\d+)$/){
      $resX = $1 if not defined $resX;
      $resY = $2 if not defined $resY;
    }else{
      die "could not read resolution using `res`\n";
    }
  }

  $widthPercent =~ s/\s*%\s*$//g;
  $offsetPercent =~ s/\s*%\s*$//g;

  if($widthPercent !~ /^(\d+|\d*\.\d+)$/){
    die "invalid width-percent: $widthPercent\n";
  }elsif($offsetPercent !~ /^(\d+|\d*\.\d+)$/){
    die "invalid offset-percent: $offsetPercent\n";
  }elsif($resX !~ /^\d+$/ or $resX eq 0){
    die "invalid res-x: $resX\n";
  }elsif($resY !~ /^\d+$/ or $resY eq 0){
    die "invalid res-y: $resY\n";
  }

  my $numPages = $isDouble ? 2 : 1;

  if($isRotate){
    ($resX, $resY) = ($resY, $resX);
  }

  my $offsetX = 0;
  my $offsetY = int($resY * $offsetPercent / 100.0);
  my $width = int($resX * $widthPercent / 100.0) * $numPages - $offsetX;
  my $height = $resY - $offsetY;

  my $geometry = "${width}x${height}+${offsetX}+${offsetY}";

  print "GEOMETRY: $geometry\n";
  exec "feh", "--geometry=$geometry", @FEH_ARGS;
}

&main(@ARGV);
