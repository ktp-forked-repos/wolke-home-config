#!/usr/bin/perl
use strict;
use warnings;

my $fanartDir = "$ENV{HOME}/Pictures/hpmor-fanart";

my $hpmorFanartUrl = "http://hpmor.com/fan-art/";

my @extras = (
  "http://zerinity.deviantart.com/art/Methods-of-Rationality-259116881",
);

my @skip = (
  #broken
  "twisted-black-candy.deviantart.com",
  "purelysadistic.deviantart.com",
  "quantumspork.deviantart.com",
  "unknowncartoonslover.deviantart.com",
  "anhyvar.deviantart.com.*Time-Pressure",
  "http://dnaliw.deviantart.com/#/d2w9ijx",
  "http://liz-of-all-trades.tumblr.com/post/2801796385/harry-potter-and-the-methods-of-rationality",
  "http://img291.imageshack.us/img291/8175/hpatmor.gif",
  "img820.imageshack.us/img820/1120/rsa.png",
  "http://www.vadimkulikov.com/art/Kulikov_Vadim_40cmx60cm_Confess_Your_Ignorance_Burned_to_Plywood.jpg",
  "photobucket.com.*smallricochet.*HarryPotterWutblue.jpg.*",
  "photobucket.com.*WaterToFire.*Quirrell.jpg",
  "http://img222.imageshack.us/i/wandinhand.jpg",
  "^http://posterous.com/.*",
  "tinypic.com.*pic=hvq9fm.*",
  "http://guciek.net/en/drawings/2010/2010_11_30",

  #music
  "^https?://soundcloud.com/",
  "http://hpmor.com/wordpress/wp-content/uploads/2012/03/SunshineRegimentMarch.mp3",
  "mediafire.com.*z7e7dlh26vajlhv",
  "http://youtu.be/9gxYYw_NO9M",
  "http://web.mit.edu/jgross/Public/brahm-lullaby-quirrel.mp3",

  #videos
  "youtube.com.*F7NmTXOLI8k",
  "youtube.com.*wjZRM6KgGbE",
  "youtube.com.*GnOT5BwIaz8",

  #documents
  "spreadsheets.google.com.*AiCgihP6rBXNdC04OTNpaVA4VDdjZWs0Qkx2Q3p2Q0E",
  "docs.google.com.*1QlyECq9SndpOnp7PGUD0w7kTZeU_2FhtgOVUXptLWQs",

  #credits/bio/misc links
  "^http://arr.am/harry-potter-and-the-methods-of-rationality\$",
  "^http://jaimeastorga2000.blogspot.com/2010/02/legally-free-content.html\$",
  "^http://www.amomentofpeace.net/\$",
  "^http://guciek.net/\$",
  "^http://orngjce223.net/\$",
  "^http://www.facebook.com/pages/Harry-Potter-and-the-Methods-of-Rationality/114856938568806\$",
);

my %sub = (
  "http://dinosaurusgede.deviantart.com/#/d3096m6"
    => "http://dinosaurusgede.deviantart.com/art/Sorting-Hat-omake-181827006",
  "http://scudamour.deviantart.com/#/d33jlv1"
    => "http://scudamour.deviantart.com/art/Hermione-187352173",
  "http://dzhu.deviantart.com/#/d5cdja4",
    => "http://dzhu.deviantart.com/art/HPMOR-cover-323117788",

  "http://dzhu.deviantart.com/#/d5fqdl7"
    => "http://dzhu.deviantart.com/art/General-s-quarters-328755787",
  "http://karei-no-shinzui.deviantart.com/#/d52f9dn"
    => "http://karei-no-shinzui.deviantart.com/art/Somewhere-in-the-Dungeons-306402107",
  "http://genericwin.deviantart.com/#/d2w0qcd"
    => "http://genericwin.deviantart.com/art/Don-t-Make-Me-Snap-My-Fingers-174714205",
  "http://browse.deviantart.com/?qh=%C2%A7ion=&amp;q=Harry+Potter+methods+of+Rationality#/d2unj5l"
    => "http://inwitari-turelie.deviantart.com/art/A-Rational-Battle-172418745",
  "http://dzhu.deviantart.com/#/d5cdke2"
    => "http://dzhu.deviantart.com/art/Harry-and-Co-323119226",
  "http://fine-line.deviantart.com/#/d2vycuk"
    => "http://fine-line.deviantart.com/art/Waiting-174603404",
  "http://dinosaurusgede.deviantart.com/gallery/#/d2vnh46"
    => "http://dinosaurusgede.deviantart.com/art/zabini-last-standing-174095718",
  "http://dinosaurusgede.deviantart.com/gallery/#/d2vnhil"
    => "http://dinosaurusgede.deviantart.com/art/zabini-meets-quirellmort-174096237",
  "http://alethiar.deviantart.com/#/d2y7061"
    => "http://alethiar.deviantart.com/art/Try-to-destroy-THESE-ones-178366105",
  "http://tomreagan.deviantart.com/gallery/#/d3216qm"
    => "http://tomreagan.deviantart.com/art/Bahry-One-hand-184813150",
  "http://slvrcrystalc.deviantart.com/#/d32h0il"
    => "http://slvrcrystalc.deviantart.com/art/HP-MoRationality-Azkaban-185551581",

  "http://pinkyoungceo.tumblr.com/post/54285787405/more-a-hilt-whose-pommel-was-a-glowing"
    => "http://legitimancy.tumblr.com/post/54285787405/more-a-hilt-whose-pommel-was-a-glowing",

  "http://christopherolah.wordpress.com/2010/08/14/harry-potter-and-the-methods-of-rationality-fanart/",
    => "http://christopherolah.files.wordpress.com/2010/08/hpmor2.png",

  "http://www.furaffinity.net/view/10966913/"
    => "http://t.facdn.net/10966913\@400-1372607316.jpg",
  "http://www.nancyhua.com/drawing/hpmor45/"
    => "http://i2.wp.com/nancyhua.com/wp-content/uploads/2012/05/hpmor45.png?fit=724%2C724",
  "http://www.newgrounds.com/art/view/miststrara/expecto-patronum"
    => "http://art.ngfiles.com/images/224/miststrara_expecto-patronum.jpg",

  "http://www.amomentofpeace.net/comic.php?num=Lucius",
    => "http://www.amomentofpeace.net/moments/Lucius~A%20Message%20for%20Lucius.jpg",
);

my @sections = (
  "Banner / cover art:",
  "Miscellaneous:",
);
my $secRe = join "|", @sections;

sub getFileByPrefix($);
sub fmt($);
sub download($$$$$);
sub attemptDownloadImage($$$$);
sub getChaptersHtml($);
sub readPage($);
sub getUrls($);

sub main(@){
  my $verbose = 0;
  if(@_ == 1 and $_[0] =~ /^(-v|--verbose)$/){
    $verbose = 1;
    shift;
  }
  die "Usage: $0 [-v|--verbose]\n" if @_ != 0;

  die "\"$fanartDir\" is not a directory\n" if not -d $fanartDir;
  chdir $fanartDir;

  my $html = readPage $hpmorFanartUrl;
  my %chapters = getChaptersHtml($html);

  my $totalSkipped = 0;
  my $totalAlreadyDownloaded = 0;
  my $totalNewlyDownloaded = 0;

  for my $chName(sort keys %chapters){
    my $html = $chapters{$chName};

    my $header = "\n=====\nCHAPTER $chName\n";
    my $headerPrinted = 0;

    my %urls = getUrls $html;
    for my $url(sort keys %urls){
      $url = $sub{$url} if defined $sub{$url};
      my $name = $urls{$url};
      $name = '' if not defined $name;
      $name = fmt $name;
      my $sha1sum = `echo "$url" | sha1sum -`;
      $sha1sum = substr $sha1sum, 0, 7;
      my $skip = 0;
      for my $skipRe(@skip){
        if($url =~ /$skipRe/){
          if($verbose){
            print $header if not $headerPrinted;
            $headerPrinted = 1;
            print "  {skipped} $url\n";
          }
          $skip = 1;
          $totalSkipped++;
          last;
        }
      }
      next if $skip;
      my $f = getFileByPrefix "${chName}_${sha1sum}";
      if(defined $f){
        if($verbose){
          print $header if not $headerPrinted;
          $headerPrinted = 1;
          print "  {downloaded} $f\n";
        }
        $totalAlreadyDownloaded++;
      }else{
        print $header if not $headerPrinted;
        $headerPrinted = 1;
        print "\n\n#####downloading ${chName}_${sha1sum}: $url\n";
        attemptDownloadImage $url, $sha1sum, $chName, $name;
        print "\n\n";
        $totalNewlyDownloaded++;
      }
    }
  }

  print "\n";
  print "Skipped $totalSkipped broken URLs\n";
  print "Ignored $totalAlreadyDownloaded already downloaded URLs\n";
  print "Downloaded $totalNewlyDownloaded new URLs\n";
}

sub getFileByPrefix($){
  my $prefix = shift;
  my $f = `ls $prefix* 2>/dev/null`;
  chomp $f;
  return $f =~ /^\Q$prefix\E/ ? $f : undef;
}

sub fmt($){
  my $s = shift;
  $s =~ s/\&#8217;//g;
  $s =~ s/[><]+//g;
  $s = lc $s;
  $s =~ s/^\s+//;
  $s =~ s/\s$//;
  $s =~ s/[^a-zA-Z0-9]+/-/g;
  $s =~ s/-$//;
  return $s;
}

sub download($$$$$){
  my ($imgUrl, $sha1sum, $chapter, $name, $desc) = @_;
  my $ext;
  if($imgUrl =~ /\/([^\/]*\.)(jpg|png|jpeg|gif)(\?.*)?$/){
    $desc = fmt $1 if not defined $desc;
    $ext = fmt $2;
  }

  my $fileName = "${chapter}_${sha1sum}";
  $fileName .= "_$name" if defined $name and $name !~ /^\s*$/;
  $fileName .= "_$desc" if defined $desc and $desc !~ /^\s*$/;
  $fileName .= ".$ext" if defined $ext and $ext !~ /^\s*$/;
  system "wget \"$imgUrl\" -O \"$fileName\"";
}

sub attemptDownloadImage($$$$){
  my ($url, $sha1sum, $chapter, $name) = @_;
  my ($imgUrl, $desc);
  if($url =~ /\.(png|jpg|gif|jpeg)(\?.*)?$/i){
    $imgUrl = $url;
  }elsif($url =~ /photobucket/){
    my $html = readPage $url;
    if($html =~ /"(https?:\/\/i.*\.photobucket\.com[^"]*\.(?:jpg|png|jpeg|gif))"/){
      $imgUrl = $1;
    }else{
      die "FUCK: $html\n\n$url\n";
    }
  }elsif($url =~ /imgur/){
    my $html = readPage $url;
    if($html =~ /"(https?:\/\/i\.imgur\.com[^"]*\.(?:jpg|png|jpeg|gif))"/){
      $imgUrl = $1;
    }else{
      die "FUCK: $html\n\n$url\n";
    }
  }elsif($url =~ /tumblr/){
    my $html = readPage $url;
    $desc = fmt $1 if $url =~ /\/([a-zA-Z0-9\-_]+)$/;

    #/post/ => /image/
    if($url =~ /([a-zA-Z0-9\-_]\.tumblr\.com)\/post\/(\d+)\//){
      my $img = "$1/image/$2";
      if($html =~ /"(http[^"]*$img+[^"]*)"/){
        $url = $1;
        $html = readPage $url;
      }
    }

    my @imgUrls = $html =~ /"(http[^"]*media\.tumblr\.com[^"]*\.(?:jpg|png|jpeg|gif))"/g;
    @imgUrls = grep {$_ !~ /\/avatar/ } @imgUrls;

    if(@imgUrls > 0){
      $imgUrl = $imgUrls[0];
    }
  }elsif($url =~ /deviantart/){
    my $html = readPage $url;
    if($html =~ /"(https?:[^"]*\.(?:jpg|png|jpeg|gif))"/){
      $imgUrl = $1;
    }else{
      die "FUCK: $html\n\n$url\n";
    }
  }

  if(defined $imgUrl){
    download $imgUrl, $sha1sum, $chapter, $name, $desc;
  }else{
    die "Could not find an image for $url\n";
  }
}

sub readPage($){
  return `wget "$_[0]" -O - 2>/dev/null`;
}

sub getChaptersHtml($){
  my $html = shift;
  my %chapters;

  my @sections = split /<\s*hr\s*\/?\s*>/, $html;
  for my $sec(@sections){
    if($sec =~ /fan art:/i){
      $sec =~ s/Chi?\.\s*\d+:|$secRe/%%%$&/gi;
      my @chSections = split /%%%/, $sec;
      shift @chSections;
      for my $ch(@chSections){
        die "FUCK: $ch\n" if $ch !~ /^Chi?\.\s*\d+:|$secRe/;
        my $chName = $&;
        $chName =~ s/^Chi?.\s*//;
        $chName =~ s/:\s*$//;

        $chName = "0$chName" if $chName =~ /^\d$/;
        $chName = "0$chName" if $chName =~ /^\d\d$/;
        $chName = "ch$chName" if $chName =~ /^\d+$/;
        $chName = fmt $chName;
        $chapters{$chName} = $ch;
      }
    }
  }

  return %chapters;
}

sub getUrls($){
  my $html = shift;
  my %urls;
  my $okTags = "(?:<\\s*\\/?\\s*(?:br|strong|em)\\s*\\/?\\s*)";
  my @anchors = $html =~ /<a [^>]*>(?:[^<]*|$okTags)*<\/a>/gmsi;
  for my $a(@anchors){
    die "FAILED ANCHOR: $a\n" if $a !~ /<a href="([^"]*)"[^>]*>((?:[^<]*|$okTags)*)<\/a>/;
    my ($url, $desc) = ($1, $2);
    $url =~ s/\s*$//;
    $desc =~ s/$okTags//g;
    $urls{$url} = $desc;
  }
  my @urls = $html =~ /http:[^"' \t\n]*/gm;
  for my $url(@urls){
    $url =~ s/\s*$//;
    if(not defined $urls{$url}){
      if($url =~ /^https:/){
        $url =~ s/^https:/http:/;
      }else{
        $url =~ s/^http:/https:/;
      }
      die "missing url: $url\n" if not defined $urls{$url};
    }
  }
  return %urls;
}

&main(@ARGV);
