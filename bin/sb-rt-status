#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $rtViews = {
  default => "rat_0",
  all => "main",
};

my $remoteHome = "/home2/teleshoes";
my $remoteDir = "$remoteHome/rt-status";
my $remoteTorrentDir = "$remoteHome/.config/rtorrent/session/";

my $skipDirRegex = "^$remoteHome/seeds";
my $localDownloadDir = "/media/seedbox";

sub formatTimeS($);
sub formatTorrent($);
sub parseTorrents($);
sub parsePeers($);
sub parsePythonStr($);
sub run(@);

my $usage = "Usage:
  $0 [--all]
    use `rtxmlrpc` to print download+peer status of torrents on `seedbox`

  OPTS:
    --all
      include torrents that match '$skipDirRegex', which are skipped by default
      also, use '$$rtViews{all}' in 'rtxmlrpc d.multicall' instead of '$$rtViews{default}'

    --check
      instead of printing status, use `check-torrent` to verify local download
      download dir: `$localDownloadDir
";

sub main(@){
  my $all = 0;
  my $check = 0;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(--all)$/){
      $all = 1;
    }elsif($arg =~ /^(--check)$/){
      $check = 1;
    }else{
      die $usage;
    }
  }
  die $usage if @_ > 0;

  my $rtViewType = "default";
  $rtViewType = "all" if $all;

  my $rtView = $$rtViews{$rtViewType};

  my $host = `seedbox --host`;
  chomp $host;

  my $copyTorrentsCmd;
  if($check){
    $copyTorrentsCmd = "cp -ar $remoteTorrentDir/*.torrent $remoteDir";
  }else{
    $copyTorrentsCmd = "echo not copying .torrent files";
  }

  run "ssh", $host, "
    rm -rf $remoteDir
    mkdir $remoteDir
    $copyTorrentsCmd
    rtxmlrpc d.multicall $rtView \\
      d.get_hash=                \\
      d.get_name=                \\
      d.get_directory=           \\
      d.get_completed_bytes=     \\
      d.get_size_bytes=          \\
      d.get_down_rate=           \\
      > $remoteDir/info
    hashes=`grep -oP \"^\\[\\'[A-F0-9]{40}\" $remoteDir/info | cut -c3-`
    echo processing \$(echo \$hashes | wc -w) torrents
    for h in \$hashes; do
      echo \"  \$h\"
      rtxmlrpc p.multicall \$h '' \\
        p.get_completed_percent=  \\
        p.get_down_rate=          \\
        p.get_down_total=         \\
        > $remoteDir/peers-\$h
    done
    echo finished
    echo
  ";

  my $localDir = "/tmp/rt-status-" . int(time*1000);

  run "mkdir", "-p", $localDir;
  run "rsync", "-avP", "$host:$remoteDir/", $localDir;

  my @torrents = parseTorrents $localDir;

  my @okTorrents = @torrents;
  @okTorrents = grep {$$_{dir} !~ /$skipDirRegex/} @okTorrents if not $all;

  print "\n\n\nshowing " . (0+@okTorrents) . " torrents\n";
  if($check){
    die "missing download dir: $localDownloadDir\n" if not -d $localDownloadDir;
    $ENV{PWD} = $localDownloadDir;
    chdir $localDownloadDir;
    my @verified;
    my @corrupted;
    my $logFile = "/tmp/rt-check-" . int(time*1000) . ".log";
    print "\n\nlogging output to $logFile\n";
    open LOG, "> $logFile" or die "Could not write to log file\n";
    my $msg;
    for my $t(@okTorrents){
      $msg = "="x30 . "\n" . "checking $$t{name}\n$$t{hash}\n";
      print $msg;
      print LOG $msg;
      my $torrentFile = "$localDir/$$t{hash}.torrent";
      if(not -f $torrentFile){
        die "MISSING TORRENT FILE for $$t{name}:\n$torrentFile\n"
      }
      my $file = "$localDownloadDir/$$t{name}";
      my $size = "size unknown";
      if(-e $file){
        open CMD, "-|", "du", "-hs", $file or die "Could not run du -hs on $file\n";
        $size = <CMD>;
        close CMD;
        if($size =~ /^(\d+(?:\.\d+)?[A-Z]+)\s*/){
          $size = $1;
        }
      }else{
        $msg = "\n\n$file does not exist\n";
        print $msg;
        print LOG $msg;
      }
      $$t{localDownloadSize} = $size;

      open CMD, "-|", "check-torrent", $torrentFile
        or die "Could not run check-torrent\n";
      my $line;
      my $verified = 0;
      while($line = <CMD>){
        print $line;
        print LOG $line;
        if($line =~ /^VERIFIED$/){
          $verified = 1;
        }
      }
      close CMD;
      if($? != 0){
        $verified = 0;
      }
      if($verified){
        push @verified, $t;
      }else{
        push @corrupted, $t;
      }
    }
    close LOG;
    print "\nlog file written to $logFile\n";
    print "\n\n" . (0+@corrupted) . " corrupted torrents\n";
    @verified = sort {$$a{name} cmp $$b{name}} @verified;
    @corrupted = sort {$$a{name} cmp $$b{name}} @corrupted;
    for my $t(@verified){
      print "VERIFIED: $$t{name} ($$t{localDownloadSize})\n";
    }
    print "\n\n";
    for my $t(@corrupted){
      print "CORRUPTED: $$t{name} ($$t{localDownloadSize})\n";
    }
  }else{
    for my $t(@okTorrents){
      print formatTorrent $t;
    }
  }

  run "rm", "-rf", $localDir;
}

sub formatTimeS($){
  my $sex = shift;
  my $d = int($sex / 60 / 60 / 24);
  my $h = int($sex / 60 / 60) % 24;
  my $m = int($sex / 60) % 60;
  my $s = int($sex) % 60;
  $d = $d > 0 ? sprintf "%02dd", $d : "";
  $h = $h > 0 ? sprintf "%02dh", $h : "";
  $m = $m > 0 ? sprintf "%02dm", $m : "";
  $s = $s > 0 ? sprintf "%02ds", $s : "";
  return sprintf "%12s", "$d$h$m$s";
}

sub formatTorrent($){
  my $t = shift;
  my @peerCountsFmt;
  for my $bucket(sort keys %{$$t{peerCounts}}){
    push @peerCountsFmt, "$bucket=$$t{peerCounts}{$bucket}";
  }
  my $percent = int(100 * $$t{completedBytes} / $$t{sizeBytes});
  my $completedMiB = $$t{completedBytes} / 1024 / 1024;
  my $sizeMiB = $$t{sizeBytes} / 1024 / 1024;
  my $downRateMiBs = $$t{downRate} / 1024 / 1024;
  my $etaS = $downRateMiBs == 0 ? 0 : ($sizeMiB-$completedMiB)/$downRateMiBs;
  my $eta = formatTimeS $etaS;
  return sprintf "%s\n%3d%s %s\n     %9.3fMiB / %9.3fMiB  @ %9.3fMiB/s    ETA: %s\n  PEERS: %s\n",
    "-" x 30,
    $percent, '%',
    $$t{name},
    $completedMiB,
    $sizeMiB,
    $downRateMiBs,
    $eta,
    "@peerCountsFmt",
    ;
}

sub parseTorrents($){
  my $localDir = shift;
  my $infoFile = "$localDir/info";
  my $info = `cat "$infoFile"`;
  my @torrents;
  while($info =~ /
    ^\[ '([0-9A-F]{40})',\n
    ^\s (.*),\n
    ^\s (.*),\n
    ^\s (\d+),\n
    ^\s (\d+),\n
    ^\s (\d+)\]\n
    /mgx){
    my $t = {
      hash => $1,
      name => $2,
      dir  => $3,
      completedBytes => $4,
      sizeBytes => $5,
      downRate => $6,
    };
    $$t{name} = parsePythonStr $$t{name};
    $$t{dir} = parsePythonStr $$t{dir};
    push @torrents, $t;
  }

  for my $t(@torrents){
    my $peersInfo = `cat "$localDir/peers-$$t{hash}"`;
    $$t{peerCounts} = parsePeers $peersInfo;
  }

  return @torrents;
}

sub parsePeers($){
  my $peersInfo = shift;

  my $peerCounts = {};
  for my $peer(split /\n/, $peersInfo){
    if($peer =~ /^\[(\d+), (\d+), (\d+)\]$/){
      my ($percent, $downRate, $downTotal) = ($1, $2, $3);
      my $bucket;
      if($percent == 100){
        $bucket = "ALL";
      }elsif($percent >= 50){
        $bucket = "HALF";
      }elsif($percent > 0){
        $bucket = "LITTLE";
      }elsif($percent == 0){
        $bucket = "NONE";
      }else{
        $bucket = "UNKNOWN";
      }
      my $cur = defined $$peerCounts{$bucket} ? $$peerCounts{$bucket} : 0;
      $$peerCounts{$bucket} = $cur + 1;
    }
  }
  return $peerCounts;
}

sub parsePythonStr($){
  my $s = shift;
  if($s =~ /(^u?'.*'$)|(^u?".*")$/){
    my @cmd = ("python", "-c", "print $s.encode('utf-8')");
    my $ok = open CMD, "-|", @cmd;
    if($ok){
      my $res = join '', <CMD>;
      chomp $res;
      close CMD;
      if($? == 0 and $res =~ /\S/){
        return $res;
      }
    }
  }
  $s =~ s/^u?'(.*)'$/$1/;
  $s =~ s/^u?"(.*)"$/$1/;
  return $s;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
