#!/usr/bin/perl
use strict;
use warnings;
use Text::CSV;
use Time::HiRes qw(sleep time);
use utf8;

sub formatKlompInfoLine($$);
sub getIpmagicCommand($$@);
sub klompInfo(@);
sub offset($$$);
sub run(@);

my @extraCmd = qw(xscreensaver-command -deactivate);
my $defaultDelayMillis = 1000;

my $usage = "Usage:
  $0 [OPTS]
    run bigtext with info from klomp-info
    also runs \"@extraCmd\"

    OPTS
       --ipmagic=CONFNAME
         runs bigtext with ipmagic (a la `ipmagic CONFNAME bigtext`)

       --ipmagic-user=USERNAME
         adds -u USERNAME to ipmagic (a la `ipmagic CONFNAME -u USERNAME bigtext`)

       --delay=MILLIS
         time to sleep in milliseconds after subsequent klomp displays
         default is $defaultDelayMillis

       --once
         run once and quit

       -w|--window
         include --fullScreen=false in bigtext opts

       --height=HEIGHT
         include --forceHeight=HEIGHT in bigtext opts

       --width=WIDTH
         include --forceWidth=WIDTH in bigtext opts

       --off
         run `pkill ^bigtext\$` and `bigtext -k` (local or with ipmagic)
         ignore options: --once --delay --height --width

       --toggle
         check if bigtext is running with:
           `pgrep ^bigtext\$` (local or with ipmagic)
         if bigtext is running:
           run `pkill ^bigtext\$` and `bigtext -k` (same as --off)
         otherwise:
           start bigtext normally (this option has no effect if not running)
";

sub main(@){
  my $ipmagic;
  my $ipmagicUser;
  my $delay = $defaultDelayMillis;
  my $once = 0;
  my $window = 0;
  my $height;
  my $width;
  my $off = 0;
  my $toggle = 0;

  while(@_ > 0){
    my $arg=shift;
    if($arg =~ /^--ipmagic=(.*)$/){
      $ipmagic = $1;
    }elsif($arg =~ /^--ipmagic-user=(.*)$/){
      $ipmagicUser = $1;
    }elsif($arg =~ /^--delay=(\d+)$/){
      $delay = $1;
    }elsif($arg =~ /^--once$/){
      $once = 1;
    }elsif($arg =~ /^(-w|--window)$/){
      $window = 1;
    }elsif($arg =~ /^--height=(\d+)$/){
      $height = $1;
    }elsif($arg =~ /^--width=(\d+)$/){
      $width = $1;
    }elsif($arg =~ /^--off$/){
      $off = 1;
    }elsif($arg =~ /^--toggle$/){
      $toggle = 1;
    }else{
      die $usage;
    }
  }

  if($toggle and not $off){
    my @pgrepCmd = getIpmagicCommand($ipmagic, $ipmagicUser, 'pgrep', '^bigtext$');
    open FH, "-|", @pgrepCmd
      or die "could not run @pgrepCmd\n$!\n";
    my @procs = <FH>;
    close FH;
    if(@procs > 0 and $procs[0] =~ /^\d+$/){
      $off = 1;
    }
  }

  if($off){
    system getIpmagicCommand($ipmagic, $ipmagicUser, 'pkill', '^bigtext$');
    system getIpmagicCommand($ipmagic, $ipmagicUser, 'bigtext', '-k');
    exit;
  }

  my @bigtextOpts;
  push @bigtextOpts, "--fullScreen=false" if $window;
  push @bigtextOpts, "--forceHeight=$height" if defined $height;
  push @bigtextOpts, "--forceWidth=$width" if defined $width;

  my @bigtextCmd = getIpmagicCommand($ipmagic, $ipmagicUser,
    "bigtext",
      "--lineSeparator=true",
      @bigtextOpts,
      "--stdin");

  print "@bigtextCmd\n";
  open FH, "|-", @bigtextCmd;

  while(1){
    my $now = time;

    run getIpmagicCommand($ipmagic, $ipmagicUser, @extraCmd);
    print FH formatKlompInfoLine($ipmagic, $ipmagicUser);
    last if $once;

    my $toWait = ($delay/1000) - (time - $now);
    sleep $toWait if $toWait > 0;
  }

  close FH;
}

sub formatKlompInfoLine($$){
  my $ipmagic = shift;
  my $ipmagicUser = shift;
  my $info = klompInfo(qw(pos len title artist album));

  my $fmt = ''
    . "$$info{pos} / $$info{len}\n"
    . "$$info{artist}\n"
    . "$$info{album}\n"
    . "$$info{title}\n"
    ;
  $fmt =~ s/\\/\\\\/g;
  $fmt =~ s/\n/\\n/g;
  $fmt =~ s/\t/\\t/g;
  $fmt =~ s/\r//g;
  $fmt .= "\n";
  utf8::encode($fmt);
  print $fmt;
  return $fmt;
}

sub getIpmagicCommand($$@){
  my $ipmagic = shift;
  my $ipmagicUser = shift;
  my @cmd = @_;
  if(defined $ipmagic){
    @cmd = map {$_ =~ s/'/'\\''/g; "'$_'"} @cmd;
    if(defined $ipmagicUser){
      @cmd = ("ipmagic", $ipmagic, "-u", $ipmagicUser, @cmd);
    }else{
      @cmd = ("ipmagic", $ipmagic, @cmd);
    }
  }
  return @cmd;
}

sub klompInfo(@){
  my @cols = @_;

  my $csv = Text::CSV->new ( { binary => 1 } );
  $csv->parse(`klomp-info -c @cols`);

  my @vals = $csv->fields();
  die "Error parsing klomp-info CSV\n" if @cols != @vals;

  my $info = {};
  for(my $i=0; $i<@cols; $i++){
    my $col = $cols[$i];
    my $val = $vals[$i];
    $$info{$col} = $val;
  }
  return $info;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
