#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);
use IPC::Open3;
use Symbol qw(gensym);

my $main = "/media/videos";
my $mirror = "/media/stuff/Videos";
my $defaultIpmagic = "nuc";

my @categories = (
  "Backup",
  "Clips Shorts Trailers",
  "Events",
  "Movies",
  "Series",
  "Anime",
  "Concerts",
);
my $okCats = join "|", @categories;

my $usage = "Usage:
  $0 [OPTS]

  OPTS
    --sync
      actually copy files from and to remote
        localhost:$mirror <=> $defaultIpmagic:$main
    --local
      perform info/md5sum updates of $main only
      fails if $main is not a mountpoint
";

sub readInfoCache($$);
sub writeInfoCache($$$);
sub formatInfoLine($$);
sub updateInfoCache($$$);
sub readMd5sumCache($$);
sub writeMd5sumCache($$$);
sub formatMd5sumLine($$);
sub updateMd5sumCache($$$$);
sub parseDuration($);
sub formatDuration($);
sub updateSizeSummary($$$);
sub formatSizeSummary($$);
sub getSizes($);
sub readExcludeFile($);
sub syncExcludeFile($);
sub checkExcludes($$);
sub getRsyncExcludes($);
sub md5($$);
sub fmtSize($);
sub isMountPoint($$);
sub test($@);
sub getIpmagicCmd($@);
sub getIpmagicFile($$);
sub readFile($$);
sub writeFile($$@);
sub appendFile($$@);
sub gitCmd($@);
sub printCmd(@);
sub run(@);
sub tryrunQuiet(@);
sub runQuiet(@);
sub runPrompt(@);
sub readProc($@);
sub readProcSilent($@);
sub readProcStdout($$$);

sub main(@){
  my $sync = 0;
  my $localOnly = 0;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(--sync)$/){
      $sync = 1;
    }elsif($arg =~ /^(--local)$/){
      $localOnly = 1;
    }else{
      die "$usage\nunknown option: $arg\n";
    }
  }
  die $usage if @_ != 0;

  die "--sync and --local cannot both be given\n" if $sync and $localOnly;

  if(not $localOnly){
    die "ERROR: $mirror does not exist\n" if not -d $mirror;
  }

  my $ipmagic;
  my $mainIpmagic;
  if(isMountPoint undef, $main){
    $ipmagic = undef;
  }elsif(not $localOnly and isMountPoint $defaultIpmagic, $main){
    $ipmagic = $defaultIpmagic;
  }else{
    die "\"$main\" not found locally or with \"ipmagic $defaultIpmagic\"\n";
  }
  $mainIpmagic = getIpmagicFile $ipmagic, $main;

  die "could not find \"main\" locally\n" if $localOnly and defined $ipmagic;

  if($sync and not $localOnly){
    print "Syncing exclude file\n";
    print "\n";
    print "=====\n";
    syncExcludeFile($ipmagic);
    print "=====\n\n";
  }

  print "reading exclude file\n";
  my $excludes = readExcludeFile($ipmagic);
  print "\n";

  my $sizes = getSizes($ipmagic);
  print "\n";

  print "generating size summary\n";
  updateSizeSummary($ipmagic, $excludes, $sizes);
  if(not $localOnly){
    run "rsync", "-a", "$mainIpmagic/size-summary", "$mirror/size-summary";
  }

  print "\n";

  if(not $localOnly){
    print "=====\n";
    print "Excluded files that are still present:\n";
    my $unexcluded = checkExcludes $excludes, $sizes;
    print map {"$_\n"} @$unexcluded;
    print "=====\n\n";

    my $rsyncExcludes = getRsyncExcludes $excludes;

    my @rsyncInfo = qw(rsync -L -a --ignore-existing --info=NAME --dry-run);

    print "=====\n";
    print "New INTERNAL files: (rsync -n, no excludes, $mirror/ => $main/)\n";
    runQuiet @rsyncInfo, "$mirror/", "$mainIpmagic/";
    print "=====\n\n";

    print "=====\n";
    print "New EXTERNAL files: (rsync -n, <EXCLUDES>, $main/ => $mirror/)\n";
    runQuiet @rsyncInfo, @$rsyncExcludes, "$mainIpmagic/", "$mirror/";
    print "=====\n\n";

    my @rsyncInfoExisting = qw(rsync -a --existing --info=NAME --dry-run);

    print "=====\n";
    print "MODIFIED\n";
    runQuiet @rsyncInfoExisting, "$mirror/", "$main/";
    print "=====\n\n";

    my @rsyncReal = qw(rsync -L -avP --ignore-existing);

    if($sync){
      print "=====\n";
      print "INTERNAL => EXTERNAL\n";
      run @rsyncReal, "$mirror/", "$mainIpmagic/";
      print "=====\n\n";

      print "=====\n";
      print "EXTERNAL => INTERNAL\n";
      run @rsyncReal, @$rsyncExcludes, "$mainIpmagic/", "$mirror/";
      print "=====\n\n";

      print "regenerating size summary\n";
      my $sizes = getSizes($ipmagic);
      updateSizeSummary($ipmagic, $excludes, $sizes);
      print "\n";
    }
  }

  print "=====\n";
  print "Info cache\n";
  updateInfoCache $ipmagic, $main, "$main/info-cache";
  if(not $localOnly){
    runQuiet "rsync", "-a", "$mainIpmagic/info-cache", "$mirror/info-cache";
  }
  print "=====\n\n";

  print "=====\n";
  print "Md5sum cache\n";
  updateMd5sumCache $ipmagic, $main, "$main/md5sum-cache", "$main/md5sum-extra";
  if(not $localOnly){
    runQuiet "rsync", "-a", "$mainIpmagic/md5sum-cache", "$mirror/md5sum-cache";
    runQuiet "rsync", "-a", "$mainIpmagic/md5sum-extra", "$mirror/md5sum-extra";
  }
  print "=====\n\n";

  print "=====\n";
  print "Git repo\n";
  gitCmd $ipmagic, "commit", "-a", "-m", "automatic commit";
  print "=====\n\n";
}

sub readInfoCache($$){
  my ($ipmagic, $cacheFile) = @_;
  my $cache = {};
  if(test $ipmagic, "-e", $cacheFile){
    my @lines = readFile $ipmagic, $cacheFile;
    for my $line(@lines){
      next if $line =~ /^\s*$/;
      chomp $line;
      if($line =~ /^
        \s*        (\d+|\?)k
        \s* \| \s* (\d+:\d\d:\d\d\.\d\d|\?)
        \s* \| \s* (.+)
      $/x){
        my ($size, $dur, $file) = ($1, $2, $3);
        $size = undef if $size eq "?";
        $dur = parseDuration $dur;
        $$cache{$file} = [$size, $dur];
      }else{
        die "Malformed info cache line: $line\n";
      }
    }
  }
  return $cache;
}
sub writeInfoCache($$$){
  my ($ipmagic, $cacheFile, $cache) = @_;
  my @lines = map{formatInfoLine($cache, $_)} sort keys %$cache;
  writeFile $ipmagic, $cacheFile, @lines;
}
sub formatInfoLine($$){
  my ($cache, $file) = @_;
  die "missing $file\n" if not defined $$cache{$file};
  my ($size, $dur) = @{$$cache{$file}};

  my $sizeFmt = defined $size ? sprintf "%9d", $size : sprintf "%9s", "?";
  my $durFmt = formatDuration $dur;
  return "${sizeFmt}k | ${durFmt} | $file\n";
}
sub updateInfoCache($$$){
  my ($ipmagic, $dir, $cacheFile) = @_;
  my $cache = readInfoCache $ipmagic, $cacheFile;

  my @files = readProc $ipmagic, "find",
    "-L",
    $dir,
    "-not", "-path", "$dir/.git*",
    "-mindepth", "2",
    "-type", "f";
  chomp foreach @files;
  s/^$dir\/// foreach @files;

  my %okFiles = map {$_ => 1} @files;

  for my $file(keys %$cache){
    if(not defined $okFiles{$file}){
      delete $$cache{$file};
      print "Remove: $file\n";
      writeInfoCache $ipmagic, $cacheFile, $cache;
    }
  }

  for my $file(sort @files){
    if(not defined $$cache{$file}){
      my $size = readProc $ipmagic, "du", "-s", "$dir/$file";
      chomp $size;
      $size = $size =~ /^(\d+)\s/ ? $1 : undef;

      my $dur = readProcSilent $ipmagic, "duration", "-s", "$dir/$file";
      chomp $dur;
      $dur = $dur =~ /^(\d+\.\d+)\s/ ? $1 : undef;

      $$cache{$file} = [$size, $dur];
      print "Add: " . formatInfoLine($cache, $file);
      writeInfoCache $ipmagic, $cacheFile, $cache;
    }
  }
}

sub readMd5sumCache($$){
  my ($ipmagic, $cacheFile) = @_;
  my $cache = {};
  if(test $ipmagic, "-e", $cacheFile){
    my @lines = readFile $ipmagic, $cacheFile;
    for my $line(@lines){
      next if $line =~ /^\s*$/;
      chomp $line;
      if($line =~ /^
        \s* ([0-9a-f]{32})
        \s* \| \s* (\d+)
        \s* \| \s* (\d+)b
        \s* \| \s* (.+)
      $/x){
        my ($md5sum, $mtime, $size, $file) = ($1, $2, $3, $4);
        $$cache{$file} = {md5sum=>$md5sum, size=>$size, mtime=>$mtime};
      }else{
        die "Malformed md5sum cache line: $line\n";
      }
    }
  }
  return $cache;
}
sub writeMd5sumCache($$$){
  my ($ipmagic, $cacheFile, $cache) = @_;
  my @lines = map{formatMd5sumLine($cache, $_)} sort keys %$cache;
  writeFile $ipmagic, $cacheFile, @lines;
}
sub formatMd5sumLine($$){
  my ($cache, $file) = @_;
  my $f = $$cache{$file};
  die "missing $file\n" if not defined $f;
  return sprintf "%s|%10d|%12db|%s\n", $$f{md5sum}, $$f{mtime}, $$f{size}, $file;
}
sub updateMd5sumCache($$$$){
  my ($ipmagic, $dir, $md5sumCacheFile, $md5sumExtraFile) = @_;
  my $md5sums = readMd5sumCache $ipmagic, $md5sumCacheFile;

  print "fetching all mtimes and filesizes\n";
  my @fileStats = readProc $ipmagic, "find",
    "-L",
    $dir,
    "-not", "-path", "$dir/.git*",
    "-mindepth", "2",
    "-type", "f",
    "-exec", "stat", "-c%s-%Y-%n", "{}", ";",
    ;

  my @files;
  my %sizes;
  my %mtimes;
  for my $fileStat(@fileStats){
    if($fileStat !~ /^(\d+)-(\d+)-(.*)\n$/){
      die "invalid stat output: $fileStat";
    }
    my ($size, $mtime, $file) = ($1, $2, $3);
    $file =~ s/^$dir\///;

    push @files, $file;
    $sizes{$file} = $size;
    $mtimes{$file} = $mtime;
  }

  my %okFiles = map {$_ => 1} @files;

  my @extraMd5sums;
  for my $file(sort keys %$md5sums){
    my $info = $$md5sums{$file};
    my $isExtra = 0;
    if(not defined $okFiles{$file}){
      print "$file is not present, moving cache entry to extra\n";
      $isExtra = 1;
    }elsif($mtimes{$file} != $$info{mtime} or $sizes{$file} != $$info{size}){
      print "$file is out of date, moving cache entry to extra\n";
      $isExtra = 1;
    }

    if($isExtra){
      push @extraMd5sums, formatMd5sumLine $md5sums, $file;
      delete $$md5sums{$file};
    }
  }

  if(@extraMd5sums > 0){
    print "appending " . (0+@extraMd5sums) . " extras to $md5sumExtraFile\n";
    appendFile $ipmagic, $md5sumExtraFile, @extraMd5sums;
    writeMd5sumCache $ipmagic, $md5sumCacheFile, $md5sums;
  }

  my @missingFiles = grep {not defined $$md5sums{$_}} @files;

  print "missing:\n";
  print map {"$_\n"} @missingFiles;
  print "(" . (0+@missingFiles) . " missing files)\n";

  for my $file(sort @files){
    if(not defined $$md5sums{$file}){
      print "fetching md5sum for: $file\n";
      my $md5 = md5 $ipmagic, "$dir/$file";
      $$md5sums{$file} = {md5sum=>$md5, size=>$sizes{$file}, mtime=>$mtimes{$file}};
      writeMd5sumCache $ipmagic, $md5sumCacheFile, $md5sums;
    }
  }
}

sub parseDuration($){
  my $dur = shift;
  return undef if $dur =~ /^\s*\?\s*$/;
  if($dur !~ /^(\d+):(\d+):(\d+|\d+.\d+)$/){
    die "Malformed duration: $dur\n";
  }
  return $1*60*60 + $2*60 + $3;
}

sub formatDuration($){
  my $dur = shift;
  return sprintf "%11s", "?" if not defined $dur;

  my $h = int($dur/60/60);
  my $m = int($dur/60) - ($h*60);
  my $s = $dur - ($h*60*60) - ($m*60);
  return sprintf '%02d:%02d:%05.2f', $h, $m, $s;
}

sub updateSizeSummary($$$){
  my ($ipmagic, $excludes, $sizes) = @_;
  my $fmtInfo = formatSizeSummary($excludes, $sizes);
  my $mainIpmagic = getIpmagicFile $ipmagic, $main;
  writeFile $ipmagic, "$main/size-summary", $fmtInfo;
}

sub formatSizeSummary($$){
  my ($excludes, $sizes) = @_;
  my $msg = "";

  my $total = 0;
  my $totalExcluded = 0;
  for my $cat(@categories){
    my $catTotal = 0;
    my $catTotalExcluded = 0;
    $msg .= "$cat\n";
    my $catSizes = $$sizes{$cat};
    my @files = keys %$catSizes;
    @files = sort {$$catSizes{$b} <=> $$catSizes{$a} || $a cmp $b} @files;
    for my $file(@files){
      my $size = $$catSizes{$file};
      my $sizeFmt = fmtSize $size;
      my $isExcluded = defined $$excludes{$cat}{$file};
      my $exclFmt = $isExcluded ? "*" : " ";

      if($isExcluded){
        $catTotalExcluded += $size;
        $totalExcluded += $size;
      }else{
        $catTotal += $size;
        $total += $size;
      }
      $msg .= "$exclFmt$sizeFmt $file\n";
    }
    my $fmtTotal = fmtSize($catTotal);
    my $fmtTotalExcluded = fmtSize($catTotalExcluded);
    $msg .= "$cat total: $fmtTotal (+$fmtTotalExcluded excluded)\n";
    $msg .= "\n";
  }
  my $fmtTotal = fmtSize($total);
  my $fmtTotalExcluded = fmtSize($totalExcluded);
  $msg .= "Total: $fmtTotal (+$fmtTotalExcluded excluded)\n";
}

sub getSizes($){
  my $ipmagic = shift;
  my $sizes = {};
  for my $cat(@categories){
    print "getting sizes for: $cat\n";
    my $catSizes = {};
    my @files = readProc $ipmagic, "ls", "$main/$cat";
    chomp foreach @files;
    @files = map {"$main/$cat/$_"} @files;

    if(@files > 0){
      my @lines = readProc $ipmagic, "du", "-s", @files;

      for my $line(@lines){
        if($line !~ /^(\d+)\t(.*)$/){
          die "Failed du: $line\n";
        }
        my ($size, $file) = ($1, $2);
        if($file !~ /^$main\/$cat\/(.+)$/){
          die "Malformed filename from du: $line\n";
        }
        my $fileName = $1;
        $$catSizes{$fileName} = $size;
      }
    }
    $$sizes{$cat} = $catSizes;
  }
  return $sizes;
}

sub readExcludeFile($){
  my $ipmagic = shift;
  my $excludeFile = "$main/exclude";
  my $excludeFileIpmagic = getIpmagicFile $ipmagic, $excludeFile;
  die "Not found: $excludeFile\n" if not test $ipmagic, "-f", $excludeFile;
  my $excludes = {};
  $$excludes{$_} = {} foreach @categories;
  my $cat;
  for my $line(readFile $ipmagic, $excludeFile){
    chomp $line;
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^($okCats)$/){
      $cat = $line;
    }elsif($line =~ /^-/){
      $line =~ s/^-//;
      die "Missing category\n" if not defined $cat;
      die "Unknown category\n" if not defined $$excludes{$cat};
      $$excludes{$cat}{$line} = 1;
    }else{
      die "Malformed line: $line\n";
    }
  }
  return $excludes;
}

sub syncExcludeFile($){
  my $ipmagic = shift;
  my $mainExclude = "$main/exclude";
  my $mirrorExclude = "$mirror/exclude";

  my $mainMd5 = md5 $ipmagic, $mainExclude;
  my $mirrorMd5 = md5 undef, $mirrorExclude;
  my $mainExcludeIpmagic = getIpmagicFile($ipmagic, $mainExclude);

  if($mainMd5 ne $mirrorMd5){
    print "exclude file changed\n";
    my $mainMod = readProc $ipmagic, "stat", "-c%Y", $mainExclude;
    chomp $mainMod;
    my $mirrorMod = readProc undef, "stat", "-c%Y", $mirrorExclude;
    chomp $mirrorMod;

    if($mirrorMod > $mainMod){
      print "$mirrorExclude is newer, using that\n";
      run "rsync", "-avP", $mirrorExclude, $mainExcludeIpmagic;
    }else{
      print "$mainExclude is newer, using that\n";
      run "rsync", "-avP", $mainExcludeIpmagic, $mirrorExclude;
    }
  }else{
    print "exclude file unchanged\n";
  }
}

sub checkExcludes($$){
  my ($excludes, $sizes) = @_;
  my $unexcluded = [];
  for my $cat(keys %$excludes){
    for my $file(keys %{$$excludes{$cat}}){
      die "Unknown exclude: $cat/$file\n" if not defined $$sizes{$cat}{$file};
      my $mirrorFile = "$mirror/$cat/$file";
      push @$unexcluded, $mirrorFile if test undef, "-e", $mirrorFile;
    }
  }
  return $unexcluded;
}

sub getRsyncExcludes($){
  my ($excludes) = @_;
  my $rsyncExcludes = [];
  for my $cat(keys %$excludes){
    for my $file(keys %{$$excludes{$cat}}){
      my $ex = "$cat/$file";
      $ex =~ s/\[/\\\[/g;
      $ex =~ s/\]/\\\]/g;
      $ex =~ s/\(/\\\(/g;
      $ex =~ s/\)/\\\)/g;
      push @$rsyncExcludes, "--exclude=$ex";
    }
  }
  push @$rsyncExcludes, "--exclude=.git*";
  return $rsyncExcludes;
}

sub md5($$){
  my ($ipmagic, $file) = @_;
  my $md5 = readProcSilent $ipmagic, "md5sum", $file;
  if($md5 =~ /^([0-9a-f]{32})\s*/){
    return $1;
  }else{
    die "Error finding md5sum for: $file\n";
  }
}

sub fmtSize($){
  return sprintf "%5.1fG", $_[0] / 1024 / 1024;
}

sub isMountPoint($$){
  my ($ipmagic, $dir) = @_;
  readProcSilent $ipmagic, "mountpoint", $dir;
  return $? == 0;
}

sub test($@){
  my $ipmagic = shift;
  my @test = getIpmagicCmd($ipmagic, "test", @_);
  tryrunQuiet @test;
  return $? == 0 ? 1 : 0;
}

sub getIpmagicCmd($@){
  my ($ipmagic, @cmd) = @_;
  if(defined $ipmagic){
    s/"/\\\\"/g foreach @cmd;
    s/^(.*)$/"$1"/ foreach @cmd;
    @cmd = ("ipmagic", $ipmagic, "@cmd");
  }

  if(wantarray){
    return @cmd;
  }else{
    return "@cmd";
  }
}

sub getIpmagicFile($$){
  my ($ipmagic, $file) = @_;

  if(defined $ipmagic){
    my $host = `ipmagic $ipmagic`;
    chomp $host;
    $file = "$host:$file";
  }
  return $file;
}

sub readFile($$){
  my ($ipmagic, $file) = @_;
  my @lines = readProc $ipmagic, "cat", $file;
  if(wantarray){
    return @lines;
  }else{
    return "@lines";
  }
}
sub writeFile($$@){
  my ($ipmagic, $file, @lines) = @_;
  my $tmpFile = "/tmp/video-sync-" . time . ".tmp";
  open FH, "> $tmpFile" or die "Could not write to $tmpFile ($file)\n";
  print FH @lines;
  close FH;

  runQuiet "rsync", "-aqP", $tmpFile, getIpmagicFile($ipmagic, $file);
}
sub appendFile($$@){
  my ($ipmagic, $file, @lines) = @_;
  my @prevLines = readFile $ipmagic, $file;
  writeFile $ipmagic, $file, (@prevLines, @lines);
}

sub gitCmd($@){
  my ($ipmagic, @cmd) = @_;
  tryrunQuiet getIpmagicCmd $ipmagic, "git", "-C", $main, @cmd;
}

sub printCmd(@){
  my @escArgs;
  for my $arg(@_){
    my $escArg = $arg;
    if($escArg =~ /[ '"\\\$!]/){
      $escArg =~ s/'/'\\''/g;
      $escArg = "'$escArg'";
    }
    push @escArgs, $escArg;
  }
  print "@escArgs\n";
}

sub run(@){
  printCmd @_;
  runQuiet @_;
}
sub tryrunQuiet(@){
  system @_;
}
sub runQuiet(@){
  system @_;
  die "Error running @_\n" if $? != 0;
}
sub runPrompt(@){
  print "@_\nRun above [y/N]? ";
  my $ok = <STDIN>;
  if($ok eq "y\n"){
    run @_;
  }
}

sub readProc($@){
  my ($ipmagic, @cmd) = @_;
  return readProcStdout $ipmagic, \@cmd, ">&STDERR";
}
sub readProcSilent($@){
  my ($ipmagic, @cmd) = @_;
  return readProcStdout $ipmagic, \@cmd, ">/dev/null";
}
sub readProcStdout($$$){
  my ($ipmagic, $cmd, $stderr) = @_;
  my @cmdArr = getIpmagicCmd $ipmagic, @$cmd;
  my $pid = open3(gensym, \*OUT, $stderr, @cmdArr);
  my @lines = <OUT>;
  waitpid($pid, 0);
  if(wantarray){
    return @lines;
  }else{
    return join '', @lines;
  }
}

&main(@ARGV);
