#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

sub guessDisplay($);

my $localhost = "127.0.0.1";

my $defaultDisplay = ":0";

my $sshControlFile = '/tmp/vncSSH.ctl';
my $port = '5900';
my $delay = 5000;

my @server = (
  "x11vnc",
    "-safer", "-localhost", "-nopw", "-once",
    "-noncache",
);
my @client = (
  "vncviewer",
    "$localhost:0",
    "-quality", "0",
    "-compresslevel", "5",
);
my @x2vncClient = (
  "x2vnc",
    "-hotkey", "a-F9",
    "-edgewidth", "0",
    "$localhost:0",
);
my @sshBind = (
  "ssh", "-f",
    "-S", $sshControlFile,
    "-L", "$port:$localhost:$port",
);
my @sshExit = (
  "ssh",
    "-S", $sshControlFile,
    "-O", "exit",
    "$localhost",
);

my $usage = "Usage:
  $0 HOST [--x2vnc]
    start x11vnc on the HOST, setup an ssh tunnel and then connect to it
    if --x2vnc is given, client is x2vnc. otherwise, client is vncviewer

  $0 off
    disconnect ssh tunnel
";

sub main(@){
  if(@_ == 1 and $_[0] eq 'off'){
    exec @sshExit;
  }else{
    my $host = shift if @_ > 0;
    my $x2vnc = shift if @_ > 0 and $_[0] eq "--x2vnc";
    die $usage if not defined $host or @_ > 0;

    system @sshExit;

    @server = (@server, '-display', guessDisplay $host);

    system @sshBind, $host, "@server";
    exit $? if $? != 0;

    sleep $delay/1000;

    system (defined $x2vnc ? @x2vncClient : @client);
  }
}

sub guessDisplay($){
  my $host = shift;
  my $ps = `ssh "$host" ps -ef`;
  if($ps =~ /\/usr\/bin\/X.* (:\d+) /){
    return $1;
  }
  return $defaultDisplay;
}

&main(@ARGV);
